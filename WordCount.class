package test;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class WordCount {
	public static class WordMap extends Mapper<Object, Text, Text, IntWritable>{
		private static final IntWritable one = new IntWritable();
		private  Text word = new Text();
		public void map(Object key,Text value,Context context) throws IOException, InterruptedException{
			StringTokenizer stTokenizer =  new StringTokenizer(value.toString());
			while(stTokenizer.hasMoreTokens()){
				word.set(stTokenizer.nextToken());
				context.write(word, one);
			}
		}
	}
	public static class SumReduce extends Reducer<Text, IntWritable, Text, IntWritable>{
		private IntWritable result =new IntWritable();
		public void reduce(Text key,Iterable<IntWritable> values,Context context) throws IOException, InterruptedException{
			int sum=0;
			for(IntWritable val : values){
				sum+=val.get();
			}
			result.set(sum);
			context.write(key, result);
		}
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
	 Configuration conf = new Configuration();
	 String [] otherArgs= new GenericOptionsParser(conf, args).getRemainingArgs();
	 if(otherArgs.length!=2){
		 System.out.println("Usage : word <in> <out>");
		 System.exit(2);
	 }
	 Job job= Job.getInstance(conf,"WordCount");
	 job.setJarByClass(WordCount.class);
	 
	 job.setMapperClass(WordMap.class);
	 
	 job.setCombinerClass(SumReduce.class);
	 
	 job.setReducerClass(SumReduce.class);

	 job.setOutputKeyClass(Text.class);

	 job.setOutputValueClass(IntWritable.class);
	 
	 FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
	 FileOutputFormat.setOutputPath(job,new Path(otherArgs[1]));
	 
	 System.exit(job.waitForCompletion(true)? 0 :1);
	 
	}

}
